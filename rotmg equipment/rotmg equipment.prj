#Version 0.21.1
#Counter: 8
#WinCounter: 1
#Window 1
#TabInfo
TabText: Layer 0
TabRenamed: 0
TabNumber: 0
TabsetLayer: 0
#Control: Window1
X       : 0
Y       : 0
CX      : 391
CY      : 503
ControlLayer: 0
Title   : 
Class   : Window
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
BkColor : 0
SystemBkColor : BTNFACE
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 1

#Proc: (General)
include euallegro.ew
include tinyxml.ew
global atom doc
doc= tinyxml_document()

include "equip xml.ew"


function real(sequence string)
sequence temp
temp=value(string)
return temp[2]
end function
--================================setup allegro============================--

function rgb2( integer r, integer g, integer b )
    return makecol(r,g,b)
end function

atom temp_bitmap
sequence equip_bitmaps
atom the_palette
atom buffer
object ret
integer window_width,window_height,workspace_width,workspace_height
integer view_left,view_top
atom color_white,color_black,color_pink,color_green,color_blue,color_red,color_background

buffer=0
window_width=800
window_height=600
workspace_width=4000
workspace_height=4000
view_left=0
view_top=0

equip_bitmaps={}

procedure startup_allegro()

object ret
win_set_window(getHWND(Window1))
the_palette = allocate_palette()
if allegro_init()!= 0 then
  puts(1,"init\n")
end if
if install_timer()!= 0 then
  puts(1,"timer\n")
end if
ret=reserve_voices (1, -1)
if install_sound (DIGI_AUTODETECT, MIDI_AUTODETECT, "")!= 0 then
  puts(1,"install sound\n")
end if
set_color_depth(16)
set_palette(the_palette)

color_white=rgb2(255,255,255)
color_black=rgb2(0,0,0)
color_pink=rgb2(255,0,255)
color_green=rgb2(0,255,0)
color_blue=rgb2(0,0,255)
color_red=rgb2(255,0,0)

color_background=color_white--rgb2(239,235,214)

--temp_bitmap=load_bitmap("images\\players.bmp", the_palette)

ret=load_bitmap("images\\chars8x8dEncounters.bmp", the_palette)
equip_bitmaps=append(equip_bitmaps, {"chars8x8dEncounters",ret,bitmap_w(ret),bitmap_h(ret)})

ret=load_bitmap("images\\lofiChar8x8.bmp", the_palette)
equip_bitmaps=append(equip_bitmaps, {"lofiChar8x8",ret,bitmap_w(ret),bitmap_h(ret)})

ret=load_bitmap("images\\lofiChar28x8.bmp", the_palette)
equip_bitmaps=append(equip_bitmaps, {"lofiChar28x8",ret,bitmap_w(ret),bitmap_h(ret)})

ret=load_bitmap("images\\lofiObj.bmp", the_palette)
equip_bitmaps=append(equip_bitmaps, {"lofiObj",ret,bitmap_w(ret),bitmap_h(ret)})

ret=load_bitmap("images\\lofiObj2.bmp", the_palette)
equip_bitmaps=append(equip_bitmaps, {"lofiObj2",ret,bitmap_w(ret),bitmap_h(ret)})

ret=load_bitmap("images\\lofiObj3.bmp", the_palette)
equip_bitmaps=append(equip_bitmaps, {"lofiObj3",ret,bitmap_w(ret),bitmap_h(ret)})

ret=load_bitmap("images\\lofiObj4.bmp", the_palette)
equip_bitmaps=append(equip_bitmaps, {"lofiObj4",ret,bitmap_w(ret),bitmap_h(ret)})

ret=load_bitmap("images\\lofiObj5.bmp", the_palette)
equip_bitmaps=append(equip_bitmaps, {"lofiObj5",ret,bitmap_w(ret),bitmap_h(ret)})

ret=load_bitmap("images\\lofiObj6.bmp", the_palette)
equip_bitmaps=append(equip_bitmaps, {"lofiObj6",ret,bitmap_w(ret),bitmap_h(ret)})

ret=load_bitmap("images\\playersSkins.bmp", the_palette)
equip_bitmaps=append(equip_bitmaps, {"playerskins",ret,bitmap_w(ret),bitmap_h(ret)})

ret=load_bitmap("images\\d3LofiObjEmbed.bmp", the_palette)
equip_bitmaps=append(equip_bitmaps, {"d3LofiObjEmbed",ret,bitmap_w(ret),bitmap_h(ret)})



end procedure

startup_allegro()

procedure close_allegro()
  destroy_palette(the_palette)
  destroy_bitmap(buffer)


  allegro_exit()
end procedure


-------called at the start before any code is executed---------------------
function crash(object x)
   ?save_bmp("test.bmp",buffer,the_palette)
    abort(0)
    return 0
end function

--crash_message("An unexpected error has occurred!\n")
--crash_file("NUL")
crash_routine(routine_id("crash"))
--win32_disable_error_messages=1
-----------------------------------------------------------------------

--load_midi
--play_midi(the_music, 1)
--play_sample(the_sample, 255, pan, pitch, 1)
--destroy_midi(the_music)
--buffer=create_bitmap(view_width,view_height)
--destroy_bitmap(buffer)
--load_sample("buzzer.wav")
--destroy_sample(buzzer_sfx)
--load_bitmap("marty.bmp", the_palette)

function equip_find_bitmap(sequence name)
	for i=1 to length(equip_bitmaps) do
		if equal(equip_bitmaps[i][1],name) then
			return equip_bitmaps[i][2]
		end if
	end for
	puts(1,name&"\n")
end function

global function wrap_between(integer v,integer min, integer max)

	while v<min do
		v+=max
	end while
	
	while v>max do
		v-=max
	end while
	
	return v
end function



function equip_sx(sequence name, sequence index)
 integer ind,w,h
	for i=1 to length(equip_bitmaps) do
		if equal(equip_bitmaps[i][1],name) then
		  if index[1]='0' then
		  	ind=str_tol(index)
		  elsif equal(name,"playerskins") then
		  	
		    ind=real(index)
		    ind*=21
		
		    --puts(1,name&" hex\n")
		  else
		    ind=real(index)
		  end if
		
		  w=equip_bitmaps[i][3]
		  h=equip_bitmaps[i][4]
		
		
		  return wrap_between(ind*8, 0, w)
		end if
	end for
end function

function equip_sy(sequence name, sequence index)
 integer ind,w,h
	for i=1 to length(equip_bitmaps) do
		if equal(equip_bitmaps[i][1],name) then
		  if index[1]='0' then
		  	ind=str_tol(index)
		  elsif equal(name,"playerskins") then
		  	
		    ind=real(index)
		    ind*=21
		
		    --puts(1,name&" hex\n")
		  else
		    ind=real(index)
		  end if
		
		  w=equip_bitmaps[i][3]
		  h=equip_bitmaps[i][4]
		
		  return 8*floor(ind/(w/8))
		
		end if
	end for
end function

--================================end setup allegro==========================--



integer count

integer xx,yy,sx,sy,dw,dh
count=0
xx=0
yy=0
sx=0
sy=0

dw=40
dh=40

buffer=create_bitmap(dw*40,dh*40)
clear_to_color(buffer,color_background)


integer fn,fn2

fn=open("data.txt", "w")
fn2=open("data2.txt", "w")

puts(fn,"global constant item_ids ={\n")
puts(fn2,"global constant item_data = {\n")


xx+=dw --creates a black space


--global procedure stretch_blit(atom source, atom dest, integer s_x, integer s_y, integer s_w, integer s_h, integer d_x, integer d_y, integer d_w, integer d_h)
for j=1 to 30 do
	

for i=1 to 65536 do
  if sequence(equip_delta(i,equip_id)) and equal(sprint(j),equip_delta(i,equip_slotType)) then
  	addItem(List1,equip_delta(i,equip_id)&"  "&equip_delta(i,equip_slotType))
  	--stretch_blit( equip_find_bitmap(equip_delta(i,equip_file)), buffer, (8*player_bitmap_offset[ getoffset(player_class_list[i][player_class]) ])-8,0,8,8, (player_class_list[i][player_2dposition][1]-(space3dto2d*2)-(space3dto2d/2) )-view_left,(player_class_list[i][player_2dposition][2]-(space3dto2d))-view_top, space3dto2d, space3dto2d  )
    --?equip_find_bitmap(equip_delta(i,equip_file))
    sx=equip_sx(equip_delta(i,equip_file) , equip_delta(i,equip_indexx) )
    sy=equip_sy(equip_delta(i,equip_file) , equip_delta(i,equip_indexx) )
    --blit(equip_find_bitmap(equip_delta(i,equip_file)),buffer,sx,sy,xx,yy,8,8)

    stretch_blit( equip_find_bitmap(equip_delta(i,equip_file)), buffer, sx,sy, 8,8, xx,yy, dw,dh  )

    ret=upper(equip_delta(i,equip_type))
    ret="{#"&ret[3..length(ret)]
    puts(fn, ret&","&'"'&equip_delta(i,equip_id)&'"'&"},\n")

    puts(fn2,ret &","& equip_delta(i,equip_slotType) &",0,"&sprint(xx)&","&sprint(yy)&"},\n" )

    xx+=dw
    if xx=dw*40 then
      yy+=dh
	  xx=0
    end if
  	count+=1
  end if
end for

end for

puts(fn,"}")
puts(fn2,"}")
close(fn)
close(fn2)

?save_bmp("test.bmp",buffer,the_palette)
--?count --866 19.5.1





#EndProc

#Control: List1
AWindow : 30
X       : 10
Y       : 30
CX      : 240
CY      : 400
ControlLayer: 0
Title   : 
Class   : List
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 1
Local : 1
OrigTitle : List8

