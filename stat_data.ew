include input_stream.ew

sequence class_list,class_freelist

class_list={}
class_freelist={}
constant typee = 1
constant num_value=2
constant string_value=3

global function stat_data_new()
  integer handle
  if length(class_freelist)>0 then
    handle= class_freelist[1]
    class_freelist = class_freelist[2..length(class_freelist)]
  else
    class_list= append(class_list,{})
    handle=length(class_list)
  end if

  class_list[handle]={0,0,0}

  return handle
end function

global function stat_data_new_from_input(integer inputstream)
  integer handle
  integer typee
  --temporary
  sequence text
  if length(class_freelist)>0 then
    handle= class_freelist[1]
    class_freelist = class_freelist[2..length(class_freelist)]
  else
    class_list= append(class_list,{})
    handle=length(class_list)
  end if

  typee=input_stream_readbyte(inputstream)
  if typee=31 or typee=62 or typee=82 or typee=38 or typee=54 then
    text=input_stream_readutf(inputstream)
     --if typee=38 then--or typee=54 then
     if typee=54 then
       puts(1,text&"\n")
     end if
    class_list[handle]={typee,0,text}
  else
    class_list[handle]={typee,input_stream_readint(inputstream),0}
  end if

  return handle
end function

global function stat_data_get(integer handle)
  return class_list[handle]
end function

global function stat_data_classsize()
  return length(class_list)
end function

global procedure stat_data_delete(integer handle)
  class_list[handle]={}
  class_freelist =append(class_freelist, handle)
end procedure