#Version 0.21.1
#Counter: 1
#WinCounter: 1
#Window 1
#TabInfo
TabText: Layer 0
TabRenamed: 0
TabNumber: 0
TabsetLayer: 0
#Control: Window1
X       : 0
Y       : 0
CX      : 400
CY      : 300
ControlLayer: 0
Title   : Window1
Class   : Window
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
BkColor : 0
SystemBkColor : BTNFACE
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 1

#Proc: (General)

include tinyxml.ew

atom doc
doc= tinyxml_document()

sequence xml_list,object_list
xml_list={}
object_list=repeat({},65536)

function object_new()
  return
  {
{"type",0},
{"id",0},
{"Class",0},
{"Item",0},
{"Texture",0},
{"File",0},
{"Index",0},
{"SlotType",0},
{"Tier",0},
{"Description",0},
{"PetFamily",0},
{"Rarity",0},
{"Activate",0},
{"Consumable",0},
{"BagType",0},
{"feedPower",0},
{"DisplayId",0},
{"Soulbound",0},
{"RateOfFire",0},
{"Sound",0},
{"Projectile",0},
{"ObjectId",0},
{"Speed",0},
{"MinDamage",0},
{"MaxDamage",0},
{"LifetimeMS",0},
{"OldSound",0},
{"FameBonus",0},
{"NumProjectiles",0},
{"ArcGap",0},
{"MultiHit",0},
{"Parametric",0},
{"PassesCover",0},
{"Size",0},
{"ConditionEffect",0},
{"ParticleTrail",0},
{"ActivateOnEquip",0},
{"amount",0},
{"Usable",0},
{"MpCost",0},
{"Armor",0},
{"Potion",0},
{"Doses",0},
{"SuccessorId",0},
{"duration",0},
{"range",0},
{"Cooldown",0},
{"Amplitude",0},
{"Frequency",0},
{"totalDamage",0},
{"condDuration",0},
{"angleOffset",0},
{"maxTargets",0},
{"Resurrects",0},
{"lockedName",0},
{"condEffect",0},
{"effect",0},
{"checkExistingEffect",0},
{"color",0},
{"Timer",0},
{"XpBoost",0},
{"ScaleValue",0},
{"ExtraTooltipData",0},
{"MpEndCost",0},
{"MultiPhase",0},
{"LTBoosted",0},
{"LDBoosted",0},
{"Backpack",0},
{"Treasure",0},
{"AnimatedTexture",0},
{"Wavy",0},
{"Enemy",0},
{"HitSound",0},
{"DeathSound",0},
{"MaxHitPoints",0},
{"Defense",0},
{"Terrain",0},
{"God",0},
{"SpawnProb",0},
{"XpMult",0},
{"Damage",0},
{"Group",0},
{"StasisImmune",0},
{"BloodProb",0},
{"BloodColor",0},
{"AltTexture",0},
{"Level",0},
{"Quest",0},
{"Boomerang",0},
{"Flying",0},
{"Spawn",0},
{"Mean",0},
{"StdDev",0},
{"Min",0},
{"Max",0},
{"Z",0},
{"ArmorPiercing",0},
{"PerRealmMax",0},
{"ProjectileId",0},
{"ProjectileDamage",0},
{"Container",0},
{"CanPutNormalObjects",0},
{"Loot",0},
{"SlotTypes",0},
{"ShowName",0},
{"CanPutSoulboundObjects",0},
{"IntergamePortal",0},
{"SpawnPoint",0},
{"DungeonName",0},
{"NoMiniMap",0},
{"NexusPortal",0},
{"Friendly",0},
{"CanUseTexes",0},
{"Animation",0},
{"period",0},
{"Frame",0},
{"RandomTexture",0},
{"ShadowSize",0},
{"LockedPortal",0},
{"Model",0},
{"Effect",0},
{"DrawOnGround",0},
{"Static",0},
{"Price",0},
{"GuildItem",0},
{"GuildItemParam",0},
{"OccupySquare",0},
{"rate",0},
{"life",0},
{"lifeVariance",0},
{"speed",0},
{"speedVariance",0},
{"size",0},
{"rise",0},
{"riseVariance",0},
{"rangeX",0},
{"rangeY",0},
{"Cube",0},
{"MinSize",0},
{"MaxSize",0},
{"SizeStep",0},
{"Top",0},
{"FullOccupy",0},
{"EnemyOccupySquare",0},
{"BlocksSight",0},
{"ProtectFromGroundDamage",0},
{"ProtectFromSink",0},
{"BaseIndent",0},
{"TopIndent",0},
{"Height",0},
{"Connects",0},
{"DotTexture",0},
{"ShortLineTexture",0},
{"LTexture",0},
{"LineTexture",0},
{"TTexture",0},
{"CrossTexture",0},
{"NoWallTextureRepeat",0},
{"Color",0},
{"prob",0},
{"ShadowColor",0},
{"Rotation",0},
{"PetYardType",0},
{"Fame",0}
}	
end function



atom root,att,child, nchild, celement
sequence ret,name1,attname,name2

integer fn,index
index=0
fn=open("data.txt","w")

procedure process_children(atom node)
atom nchild,att,celement

	nchild=tinyxml_node_firstchild(node)
	if nchild=0 then
   	  return
    end if

    if tinyxml_node_nochildren(nchild)=1 then
   	  return
    end if


	while nchild!=0 do
      	puts(1,tinyxml_node_value(nchild)&"  ")
      	puts(fn,tinyxml_node_value(nchild)&"  ")
      	name2=tinyxml_node_value(nchild)
      	
      	celement=tinyxml_node_toelement(nchild)
      	
        if celement!=0 then
        	
          att=tinyxml_frist_attribute(celement)
          if att then

            while att!=0 do
              attname=tinyxml_attribute_name(att)
              puts(1,tinyxml_attribute_name(att)&"  ")
              puts(fn,tinyxml_attribute_name(att)&"  ")
              puts(1,tinyxml_attribute_value(att)&"\n")
              puts(fn,tinyxml_attribute_value(att)&"\n")
              for i=1 to length(xml_list[index]) do
      	        if equal(xml_list[index][i][1],attname) then
      	          xml_list[index][i][2]=tinyxml_attribute_value(att)
      		      exit
      	        end if
              end for
              att=tinyxml_attribute_next(att)
            end while
          end if

        end if

        if celement!=0 then
          ret=tinyxml_element_gettext(celement)
          if length(ret) then
          	puts(1,ret&"\n")
	        puts(fn,ret&"\n")
	      else
	        puts(1,"\n")
	        puts(fn,"\n")
          end if
          for i=1 to length(xml_list[index]) do
      	      if equal(xml_list[index][i][1],name2) then
      	        xml_list[index][i][2]=ret
      	      exit
      	      end if
            end for
        end if

        if tinyxml_node_nochildren(nchild)=0 then
   	      process_children(nchild)
        end if
        nchild=tinyxml_node_IterateChildren(node,nchild)
      end while
end procedure


procedure process_objects(sequence name)
  if tinyxml_load_file(doc,"all\\"&name)=1 then
  root=tinyxml_frist_child_element(doc, "Objects")

  if root then
  	--puts(1,"root found\n")
  	--puts(fn,"root found\n")
  end if

  att=tinyxml_frist_attribute(root)
  if att then
  	
    puts(1,tinyxml_attribute_name(att)&"  ")

    puts(1,tinyxml_attribute_value(att)&"\n")
  end if

  child=tinyxml_element_firstchild(root)



  while child!=0 do

    name1=tinyxml_node_value(child)
    if equal(name1,"Object") then
      xml_list=append(xml_list, object_new() )
      index=length(xml_list)
    end if

  	puts(1,tinyxml_node_value(child)&"\n")
  	puts(fn,tinyxml_node_value(child)&"\n")
  	
    att=tinyxml_frist_attribute(child)

    if att then

      while att!=0 do
        attname=tinyxml_attribute_name(att)
        puts(1,tinyxml_attribute_name(att)&"  ")
        puts(fn,tinyxml_attribute_name(att)&"  ")
        puts(1,tinyxml_attribute_value(att)&"\n")
        puts(fn,tinyxml_attribute_value(att)&"\n")
        for i=1 to length(xml_list[index]) do
      	  if equal(xml_list[index][i][1],attname) then
      	    xml_list[index][i][2]=tinyxml_attribute_value(att)
      		exit
      	  end if
        end for
        att=tinyxml_attribute_next(att)
      end while

    end if


    nchild=tinyxml_node_firstchild(child)
    	
      while nchild!=0 do
      	puts(1,tinyxml_node_value(nchild)&"  ")
      	puts(fn,tinyxml_node_value(nchild)&"  ")
      	name2=tinyxml_node_value(nchild)
      	
        celement=tinyxml_node_toelement(nchild)

        if celement!=0 then
        	

          att=tinyxml_frist_attribute(celement)

          if att then

            while att!=0 do
              puts(1,tinyxml_attribute_name(att)&"  ")
              puts(fn,tinyxml_attribute_name(att)&"  ")
              puts(1,tinyxml_attribute_value(att)&"\n")
              puts(fn,tinyxml_attribute_value(att)&"\n")
              attname=tinyxml_attribute_name(att)
              for i=1 to length(xml_list[index]) do
      	        if equal(xml_list[index][i][1],attname) then
      	         xml_list[index][i][2]=tinyxml_attribute_value(att)
      		     exit
      	       end if
              end for
              att=tinyxml_attribute_next(att)

            end while
          end if

        end if

        if celement!=0 then
          ret=tinyxml_element_gettext(celement)
          if length(ret) then
          	puts(1,ret&"\n")
	        puts(fn,ret&"\n")
	      else
	        puts(1,"\n")
	        puts(fn,"\n")
          end if
            for i=1 to length(xml_list[index]) do
      	      if equal(xml_list[index][i][1],name2) then
      	        xml_list[index][i][2]=ret
      		    exit
      	      end if
            end for
        end if

        process_children(nchild)

        nchild=tinyxml_node_IterateChildren(child,nchild)
      end while
      child=tinyxml_node_IterateChildren(root,child)
  end while	
end if	
end procedure


sequence list
list=dir("all\\")

for i=3 to length(list) do
  --puts(1,list[i][D_NAME]&"\n")
  process_objects( list[i][D_NAME] )
  --sleep(1)
end for

close(fn)


--?length(xml_list)

--for i=1 to length(xml_list[1]) do
  --puts(1,xml_list[1][i][1]&"  "&xml_list[1][i][2])
  --puts(1,"\n")	
--end for

integer ind


for j=1 to length(xml_list) do
  ind=str_tol(xml_list[j][1][2])
  if length(object_list[ind])!=0 then
  	puts(1,"error occored\n")
  	?ind
  end if

  object_list[ ind ]=xml_list[j]

  --puts(1, sprint ( str_tol(xml_list[j][1][2]) ) &"\n")	
end for

--function equip_delta( integer index, integer id )
--  if integer(object_list[ index ][id][2]) then
--  	return 0
--  end if	

--  if length(object_list[ index ][id][2])=0 then
--  	return 1
--  else
--    return object_list[ index ][id][2]
--  end if

--end function

--?object_list[ 3294 ] [equip_wavy]
--?object_list[ 782 ][1]

--?equip_delta(3294,equip_amplitude )



#EndProc

