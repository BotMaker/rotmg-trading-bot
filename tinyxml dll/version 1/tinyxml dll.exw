--  code generated by Win32Lib IDE v0.21.1 Build Sept-29-2006

constant TheProgramType="exw" 
 
include Win32Lib.ew
without warning

--------------------------------------------------------------------------------
--  Window Window1
constant Window1 = createEx( Window, "Window1", 0, Default, Default, 400, 300, 0, 0 )
---------------------------------------------------------
--------------------------------------------------------------------------------


constant tinyxml_dll = registerw32Library("tinyxml_dll.dll")

constant xml_document= registerw32Function(tinyxml_dll, "xml_document", {}, C_POINTER)
constant xml_load_file =registerw32Function(tinyxml_dll, "xml_load_file", {C_POINTER,C_POINTER}, C_INT)
constant xml_frist_child_element=registerw32Function(tinyxml_dll, "xml_frist_child_element", {C_POINTER,C_POINTER}, C_POINTER)
constant xml_frist_attribute=registerw32Function(tinyxml_dll, "xml_frist_attribute", {C_POINTER}, C_POINTER)
constant xml_attribute_name=registerw32Function(tinyxml_dll, "xml_attribute_name", {C_POINTER}, C_POINTER)
constant xml_attribute_value=registerw32Function(tinyxml_dll, "xml_attribute_value", {C_POINTER}, C_POINTER)
constant xml_attribute_next=registerw32Function(tinyxml_dll, "xml_attribute_next", {C_POINTER}, C_POINTER)
constant xml_element_firstchild=registerw32Function(tinyxml_dll, "xml_element_firstchild", {C_POINTER}, C_POINTER)
constant xml_node_value=registerw32Function(tinyxml_dll, "xml_node_value", {C_POINTER}, C_POINTER)
constant xml_node_firstchild=registerw32Function(tinyxml_dll, "xml_node_firstchild", {C_POINTER}, C_POINTER)
constant xml_node_toelement=registerw32Function(tinyxml_dll, "xml_node_toelement", {C_POINTER}, C_POINTER)
constant xml_node_IterateChildren=registerw32Function(tinyxml_dll, "xml_node_IterateChildren", {C_POINTER,C_POINTER}, C_POINTER)

constant xml_element_gettext=registerw32Function(tinyxml_dll, "xml_element_gettext", {C_POINTER}, C_POINTER)

constant xml_node_nochildren=registerw32Function(tinyxml_dll, "xml_node_nochildren", {C_POINTER}, C_INT)



atom doc
doc= w32Func( xml_document, {} )


function tinyxml_load_file(atom doc, sequence fname)

  atom result,fname_add

  fname_add=allocate_string(fname)

  result=w32Func( xml_load_file, { doc,fname_add } )

  free(fname_add)
  return result
end function

function tinyxml_frist_child_element(atom doc, sequence name)

  atom result,name_add

  name_add=allocate_string(name)

  result=w32Func( xml_frist_child_element, { doc,name_add } )

  free(name_add)
  return result
end function

function tinyxml_frist_attribute(atom element)

  return w32Func( xml_frist_attribute, { element } )

end function

function tinyxml_attribute_name(atom att)
  atom result
  integer inc,char
  sequence text

  result=w32Func( xml_attribute_name, { att } )

  if result=0 then
  	puts(1,"asdasd\n")
  	sleep(4)
  end if
  inc=0

  text=""
  while 1 do
  	char=peek(result+inc)
  	
  	if char=0 then
  		exit
  	end if
  	--if char!=10 then
  	  text&=char
  	
  	--end if
  	inc+=1
  end while


  return text
end function


function tinyxml_attribute_value(atom att)
  atom result
  integer inc,char
  sequence text

  result=w32Func( xml_attribute_value, { att } )
  inc=0

  text=""
  while 1 do
  	char=peek(result+inc)
  	
  	if char=0 then
  		exit
  	end if
  	--if char!=10 then
  	  text&=char
  	
  	--end if
  	inc+=1
  end while


  return text
end function

function tinyxml_attribute_next(atom att)

  return w32Func( xml_attribute_next, { att } )

end function

function tinyxml_element_firstchild(atom element)

  return w32Func( xml_element_firstchild, { element } )

end function


function tinyxml_node_value(atom node)
  atom result
  integer inc,char
  sequence text

  result=w32Func( xml_node_value, { node } )
  inc=0

  text=""
  while 1 do
  	char=peek(result+inc)
  	
  	if char=0 then
  		exit
  	end if
  	--if char!=10 then
  	  text&=char
  	
  	--end if
  	inc+=1
  end while


  return text
end function

function tinyxml_node_firstchild(atom node)

  return w32Func( xml_node_firstchild, { node } )

end function


function tinyxml_node_toelement(atom node)

  return w32Func( xml_node_toelement, { node } )

end function


function tinyxml_node_IterateChildren(atom child, atom node)

  return w32Func( xml_node_IterateChildren, { child ,node } )

end function

function tinyxml_element_gettext(atom element)
  atom result
  integer inc,char
  sequence text

  result=w32Func( xml_element_gettext, { element } )
  if result=0 then
  	return {}
  end if
  inc=0

  text=""
  while 1 do
  	char=peek(result+inc)
  	
  	if char=0 then
  		exit
  	end if
  	--if char!=10 then
  	  text&=char
  	
  	--end if
  	inc+=1
  end while


  return text
end function



function tinyxml_node_nochildren( atom node)

  return w32Func( xml_node_nochildren, { node } )

end function


atom root,att,child, nchild, celement
sequence ret

integer fn
fn=open("data.txt","w")

procedure process_children(atom node)
atom nchild,att,celement

	nchild=tinyxml_node_firstchild(node)
	if nchild=0 then
   	  return
    end if

    if tinyxml_node_nochildren(nchild)=1 then
   	  return
    end if


	while nchild!=0 do
      	puts(1,tinyxml_node_value(nchild)&"  ")
      	puts(fn,tinyxml_node_value(nchild)&"  ")
      	
      	celement=tinyxml_node_toelement(nchild)
      	
        if celement!=0 then
        	
          att=tinyxml_frist_attribute(celement)
          if att then

            while att!=0 do
              --puts(1,"\n")
              --puts(fn,"\n")
              puts(1,tinyxml_attribute_name(att)&"  ")
              puts(fn,tinyxml_attribute_name(att)&"  ")
              puts(1,tinyxml_attribute_value(att)&"\n")
              puts(fn,tinyxml_attribute_value(att)&"\n")
              att=tinyxml_attribute_next(att)
            end while
          end if

        end if

        if celement!=0 then
          ret=tinyxml_element_gettext(celement)
          if length(ret) then
          	puts(1,ret&"\n")
	        puts(fn,ret&"\n")
	      else
	        puts(1,"\n")
	        puts(fn,"\n")
          end if

          --?tinyxml_element_gettext(celement)
        end if

        if tinyxml_node_nochildren(nchild)=0 then
   	      process_children(nchild)
        end if
        nchild=tinyxml_node_IterateChildren(node,nchild)
      end while
end procedure




--if tinyxml_load_file(doc,"ground.xml")=1 then
--if tinyxml_load_file(doc,"shore.xml")=1 then
--if tinyxml_load_file(doc,"players.xml")=1 then
--if tinyxml_load_file(doc,"demo.xml")=1 then
if tinyxml_load_file(doc,"account.xml")=1 then
  root=tinyxml_frist_child_element(doc, "Chars")
  --root=tinyxml_frist_child_element(doc, "Objects")
  --root=tinyxml_frist_child_element(doc, "GroundTypes")

  if root then
  	puts(1,"root found\n")
  	puts(fn,"root found\n")
  end if

  att=tinyxml_frist_attribute(root)
  if att then
  	
    puts(1,tinyxml_attribute_name(att)&"  ")

    puts(1,tinyxml_attribute_value(att)&"\n")
  end if

  child=tinyxml_element_firstchild(root)



  while child!=0 do
  	puts(1,tinyxml_node_value(child)&"\n")
  	puts(fn,tinyxml_node_value(child)&"\n")
  	
    att=tinyxml_frist_attribute(child)

    if att then

      while att!=0 do
        --puts(1,"\n")
        --puts(fn,"\n")
        puts(1,tinyxml_attribute_name(att)&"  ")
        puts(fn,tinyxml_attribute_name(att)&"  ")
        puts(1,tinyxml_attribute_value(att)&"\n")
        puts(fn,tinyxml_attribute_value(att)&"\n")
        att=tinyxml_attribute_next(att)
      end while

    end if


    nchild=tinyxml_node_firstchild(child)
    	
      while nchild!=0 do
      	puts(1,tinyxml_node_value(nchild)&"  ")
      	puts(fn,tinyxml_node_value(nchild)&"  ")
      	
        celement=tinyxml_node_toelement(nchild)

        if celement!=0 then
        	

          att=tinyxml_frist_attribute(celement)

          if att then

            while att!=0 do
              --puts(1,"\n")
              --puts(fn,"\n")
              puts(1,tinyxml_attribute_name(att)&"  ")
              puts(fn,tinyxml_attribute_name(att)&"  ")
              puts(1,tinyxml_attribute_value(att)&"\n")
              puts(fn,tinyxml_attribute_value(att)&"\n")

              att=tinyxml_attribute_next(att)

            end while
          end if

        end if

      	
        --puts(1,"has no childern "& sprint(tinyxml_node_nochildren(nchild))&"\n" )
      	

        if celement!=0 then
          ret=tinyxml_element_gettext(celement)
          if length(ret) then
          	puts(1,ret&"\n")
	        puts(fn,ret&"\n")
	      else
	        puts(1,"\n")
	        puts(fn,"\n")
          end if

          --?tinyxml_element_gettext(celement)
        end if

        process_children(nchild)

        nchild=tinyxml_node_IterateChildren(child,nchild)
      end while
      child=tinyxml_node_IterateChildren(root,child)
  end while
--TiXmlNode* l = child->FirstChild();
  --?tinyxml_frist_child_element(root, "Servers")	
end if

close(fn)



WinMain( Window1,Normal )
--this program has 399 lines without including this line. If there is a discrepancy please send this file zipped to Judith.
